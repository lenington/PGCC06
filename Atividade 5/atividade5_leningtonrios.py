# -*- coding: utf-8 -*-
"""Atividade5_LeningtonRios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OJCwp_R8616dDyIjN0Y7vom2wIF37vSt

Algoritmos
"""

from heapq import heappush, heappop

class Graph:
  def __init__(self):
    self.vertexMap = dict()           

  def addVertex(self, v):
    self.vertexMap[v] = dict()

  def removeVertex(self, v):  
    if v in self.vertexMap:
      for (i,j) in self.vertexMap[v].copy():
        print(f"e->{(i,j)}")
        self.removeEdge(i,j)
      del self.vertexMap[v]

  def vertices(self):    
    return list(self.vertexMap.keys())

  def adjacents(self, v):
    return [j for (i, j) in self.outgoing(v)]   

  def addEdge(self,u,v,data):
    if (u in self.vertexMap) and (v in self.vertexMap):
      self.vertexMap[u][(u,v)] = data
      self.vertexMap[v][(v,u)] = data
    else:
      raise ValueError(f"One or both of the V {u} and {v} are not present in the Graph!")  

  def removeEdge(self,u,v):
    if ((u,v) in self.vertexMap[u]) and ((v,u) in self.vertexMap[v]):
      del self.vertexMap[u][(u,v)]      
      del self.vertexMap[v][(v,u)]  

  def edges(self):
    return [list(e.keys()) for e in self.vertexMap.values() if len(e.keys())]

  def getEdge(self,u,v):
    return self.vertexMap[u][(u,v)]

  def outgoing(self, v):
    return list(self.vertexMap[v].keys())  

  def outdegree(self, v):
    return len(self.vertexMap[v])

  def incoming(self, v):
    return [(j,i) for (i,j) in self.vertexMap[v]] 

  def indegree(self, v):
    return len(self.vertexMap[v])

#To do
def dfs(G,v):
  S = set()
  L = list()
  dfsRec(G,v,S,L)
  return L

def dfsRec(G,v,S,L):
  S.add(v)  
  for u in G.adjacents(v):
    if u not in S:
        L.append(u)
        dfsRec(G,u,S,L)
  return L

#To do
def bfs(G,v):
  L = list()
  Q = []
  Q.append(v) 
  S = set()
  S.add(v)
  while len(Q):
    e = Q.pop(0)
    for u in G.adjacents(e):
      if u not in S:
        S.add(u)
        Q.append(u)
        L.append(u)
  return L
  
#To do  
def dijkstra(G,v,u):
  P = dict()
  H = []
  heappush(H,(0,v,None))
  while len(H) > 0:
    dist_xv, x, p = heappop(H)
    if x == u:
      P[x] = (p, dist_xv)
      return shortestPath(v,u,P)
    if x not in P:
      P[x] = (p,dist_xv)
      for t in G.adjacents(x):
        dist_vt = dist_xv + G.getEdge(x,t)
        if t not in P or dist_vt < P[t][1]:
          heappush(H,(dist_vt,t,x))

def shortestPath(v,u,P):
  L = list()
  while v != u:
    (p, dist_uv) = P[u]
    L = [u] + L
    u = p
  L = [u] + L
  return L

g = Graph()
g.addVertex("f")
g.addVertex("g")
g.addVertex("a")
g.addVertex("b")
g.addVertex("d")
g.addVertex("h")
g.addVertex("c")
g.addVertex("e")
g.addVertex("k")

g.addEdge("f","g",15)
g.addEdge("f","b",5)

g.addEdge("g","a",10)
g.addEdge("g","d",10)
g.addEdge("g","c",5)

g.addEdge("d","c",5)
g.addEdge("d","a",10)
g.addEdge("d","e",5)

g.addEdge("c","e",10)

g.addEdge("a","b",5)
g.addEdge("a","h",10)
g.addEdge("a","e",5)

g.addEdge("b","h",5)
g.addEdge("b","k",10)

g.addEdge("h","k",20)

g.addEdge("e","k",10)

assert dfs(g, 'a') == ['g', 'f', 'b', 'h', 'k', 'e', 'd', 'c']
assert dfs(g, 'k') == ['b', 'f', 'g', 'a', 'd', 'c', 'e', 'h']
assert dfs(g, 'g') == ['f', 'b', 'a', 'd', 'c', 'e', 'k', 'h']
assert dfs(g, 'b') == ['f', 'g', 'a', 'd', 'c', 'e', 'k', 'h']
print("1. dfs() completo")

assert bfs(g, 'a') == ['g', 'd', 'b', 'h', 'e', 'f', 'c', 'k']
assert bfs(g, 'k') == ['b', 'h', 'e', 'f', 'a', 'd', 'c', 'g']
assert bfs(g, 'g') == ['f', 'a', 'd', 'c', 'b', 'h', 'e', 'k']
assert bfs(g, 'b') == ['f', 'a', 'h', 'k', 'g', 'd', 'e', 'c']
print("2. bfs() completo")

assert dijkstra(g, 'f','e') == ['f', 'b', 'a', 'e']
assert dijkstra(g, 'h','k') == ['h', 'b', 'k']
assert dijkstra(g, 'g','k') == ['g', 'a', 'b', 'k']
assert dijkstra(g, 'f','d') == ['f', 'b', 'a', 'd']
assert dijkstra(g, 'e','h') == ['e', 'a', 'h']
print("3. dijkstra() completo")

g = Graph()

g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")
g.addVertex("k")
g.addVertex("l")
g.addVertex("m")
g.addVertex("n")
g.addVertex("p")
g.addVertex("o")
g.addVertex("q")
g.addVertex("r")

g.addEdge("a","b",73)
g.addEdge("a","c",64)
g.addEdge("a","d",89)
g.addEdge("a","e",104)

g.addEdge("b","k",83)

g.addEdge("c","i",64)

g.addEdge("d","n",89)

g.addEdge("e","e",40)

g.addEdge("k","h",35)

g.addEdge("h","l",36)

g.addEdge("l","i",28)
g.addEdge("l","p",63)

g.addEdge("i","f",31)
g.addEdge("i","m",20)

g.addEdge("f","n",84)

g.addEdge("n","j",53)

g.addEdge("j","q",80)
g.addEdge("j","g",35)

g.addEdge("g","q",113)

g.addEdge("m","o",50)

g.addEdge("o","r",72)
g.addEdge("o","p",41)

g.addEdge("p","r",65)

g.addEdge("r","q",65)

assert dfs(g, 'a') == ['b', 'k', 'h', 'l', 'i', 'c', 'f', 'n', 'd', 'j', 'q', 'g', 'r', 'o', 'm', 'p', 'e']
assert dfs(g, 'r') == ['o', 'm', 'i', 'c', 'a', 'b', 'k', 'h', 'l', 'p', 'd', 'n', 'f', 'j', 'q', 'g', 'e']
print("1. dfs() completo")

assert bfs(g, 'a') == ['b', 'c', 'd', 'e', 'k', 'i', 'n', 'h', 'l', 'f', 'm', 'j', 'p', 'o', 'q', 'g', 'r']
assert bfs(g, 'r') == ['o', 'p', 'q', 'm', 'l', 'j', 'g', 'i', 'h', 'n', 'c', 'f', 'k', 'd', 'a', 'b', 'e']
print("2. bfs() completo")

assert dijkstra(g, 'a', 'q') == ['a', 'd', 'n', 'j', 'q']
assert dijkstra(g, 'k', 'o') == ['k', 'h', 'l', 'i', 'm', 'o']
assert dijkstra(g, 'i', 'q') == ['i', 'm', 'o', 'r', 'q']
assert dijkstra(g, 'p', 'n') == ['p', 'l', 'i', 'f', 'n']
print("3. dijkstra() completo")

g = Graph()

g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")
g.addVertex("k")

g.addEdge("a","b",5)
g.addEdge("a","c",2)

g.addEdge("b","c",9)
g.addEdge("b","d",9)
g.addEdge("b","e",4)
g.addEdge("b","f",10)

g.addEdge("c","g",10)
g.addEdge("c","f",9)

g.addEdge("d","e",4)
g.addEdge("d","h",7)

g.addEdge("e","f",5)
g.addEdge("e","h",7)
g.addEdge("e","i",7)

g.addEdge("f","g",9)
g.addEdge("f","j",7)
g.addEdge("f","i",8)

g.addEdge("g","j",4)
g.addEdge("g","k",3)

g.addEdge("h","i",3)

g.addEdge("i","j",9)

g.addEdge("j","k",4)


assert dfs(g,'a') == ['b', 'c', 'g', 'f', 'e', 'd', 'h', 'i', 'j', 'k']
assert dfs(g,'k') == ['g', 'c', 'a', 'b', 'd', 'e', 'f', 'j', 'i', 'h']
assert dfs(g,'f') == ['b', 'a', 'c', 'g', 'j', 'i', 'e', 'd', 'h', 'k']
print("1. dfs() completo")

assert bfs(g,'a') == ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
assert bfs(g,'k') == ['g', 'j', 'c', 'f', 'i', 'a', 'b', 'e', 'h', 'd']
assert bfs(g,'f') == ['b', 'c', 'e', 'g', 'j', 'i', 'a', 'd', 'h', 'k']
print("2. dfs() completo")

assert dijkstra(g,'a','f') == ['a', 'c', 'f']
assert dijkstra(g,'b','i') == ['b', 'e', 'i']
assert dijkstra(g,'b','c') == ['b', 'a', 'c']
assert dijkstra(g,'d','k') == ['d', 'e', 'f', 'j', 'k']
print("3. dijkstra() completo")

g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")
g.addVertex("k")
g.addVertex("l")
g.addVertex("m")
g.addVertex("n")
g.addVertex("o")
g.addVertex("p")
g.addEdge("a","b",1)
g.addEdge("a","e",1)
g.addEdge("a","f",1)
g.addEdge("b","c",1)
g.addEdge("b","f",1)
g.addEdge("c","d",1)
g.addEdge("c","g",1)
g.addEdge("d","g",1)
g.addEdge("d","h",1)
g.addEdge("e","f",1)
g.addEdge("e","i",1)
g.addEdge("f","i",1)
g.addEdge("g","l",1)
g.addEdge("g","k",1)
g.addEdge("g","j",1)
g.addEdge("h","l",1)
g.addEdge("i","m",1)
g.addEdge("i","n",1)
g.addEdge("i","j",1)
g.addEdge("j","k",1)
g.addEdge("k","o",1)
g.addEdge("l","p",1)
g.addEdge("m","n",1)
g.addEdge("n","k",1)


assert dfs(g,'a') == ['b', 'c', 'd', 'g', 'l', 'h', 'p', 'k', 'j', 'i', 'e', 'f', 'm', 'n', 'o']

assert bfs(g,'a') == ['b', 'e', 'f', 'c', 'i', 'd', 'g', 'm', 'n', 'j', 'h', 'l', 'k', 'p', 'o']

assert dijkstra(g, 'a','g') == ['a', 'b', 'c', 'g']

assert dijkstra(g, 'a','j') == ['a', 'e', 'i', 'j']

assert dijkstra(g, 'a','l') == ['a', 'b', 'c', 'g', 'l']

assert dijkstra(g, 'a','i') == ['a', 'e', 'i']

print("Parabéns!!! Atividade 5 concluída com sucesso!")

g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")
g.addVertex("k")
g.addVertex("l")
g.addVertex("m")

g.addEdge("a","b",1)
g.addEdge("a","c",1)
g.addEdge("a","f",1)
g.addEdge("a","g",1)
g.addEdge("c","d",1)
g.addEdge("d","e",1)
g.addEdge("d","f",1)
g.addEdge("e","g",1)
g.addEdge("g","h",1)
g.addEdge("g","j",1)
g.addEdge("h","i",1)
g.addEdge("i","j",1)
g.addEdge("j","k",1)
g.addEdge("j","l",1)
g.addEdge("j","m",1)
g.addEdge("k","m",1)
g.addEdge("l","m",1)

assert dfs(g,'a') == ['b', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'k', 'm', 'l', 'f']

assert bfs(g,'a') == ['b', 'c', 'f', 'g', 'd', 'e', 'h', 'j', 'i', 'k', 'l', 'm']

assert dijkstra(g, 'a','g') == ['a', 'g']

assert dijkstra(g, 'a','j') == ['a', 'g', 'j']

assert dijkstra(g, 'a','l') == ['a', 'g', 'j', 'l']

assert dijkstra(g, 'a','i') == ['a', 'g', 'h', 'i']

print("Grafo 1 sucesso!")

g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")

g.addEdge("a","c",1)
g.addEdge("a","e",1)
g.addEdge("a","g",1)
g.addEdge("b","d",1)
g.addEdge("b","f",1)
g.addEdge("c","g",1)
g.addEdge("c","h",1)
g.addEdge("d","g",1)
g.addEdge("d","h",1)
g.addEdge("e","f",1)
g.addEdge("e","g",1)
g.addEdge("e","h",1)
g.addEdge("f","h",1)


assert dfs(g,'a') == ['c', 'g', 'd', 'b', 'f', 'e', 'h']

assert bfs(g,'a') == ['c', 'e', 'g', 'h', 'f', 'd', 'b']

assert dijkstra(g, 'a','b') == ['a', 'g', 'd', 'b']

assert dijkstra(g, 'a','d') == ['a', 'g', 'd']

assert dijkstra(g, 'a','f') == ['a', 'e', 'f']

assert dijkstra(g, 'a','h') == ['a', 'c', 'h']

print("Grafo 2 sucesso!")

g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")

g.addEdge("a","b",10)
g.addEdge("a","d",20)
g.addEdge("a","e",20)
g.addEdge("a","f",5)
g.addEdge("a","g",15)
g.addEdge("a","h",5)
g.addEdge("b","c",15)
g.addEdge("b","d",10)
g.addEdge("b","h",20)
g.addEdge("b","i",15)
g.addEdge("b","j",5)
g.addEdge("c","d",5)
g.addEdge("c","j",15)
g.addEdge("d","e",10)
g.addEdge("e","f",5)
g.addEdge("f","g",10)
g.addEdge("g","h",5)
g.addEdge("h","i",20)
g.addEdge("i","j",10)


assert dfs(g,'a') == ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

assert bfs(g,'a') == ['b', 'd', 'e', 'f', 'g', 'h', 'c', 'i', 'j']

assert dijkstra(g, 'f','j') == ['f', 'a', 'b', 'j']

assert dijkstra(g, 'c','g') == ['c', 'd', 'e', 'f', 'g']

assert dijkstra(g, 'e','a') == ['e', 'f', 'a']

print("Grafo 3 sucesso!")

g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")

g.addEdge("a","b",3)
g.addEdge("a","c",5)
g.addEdge("a","d",2)
g.addEdge("a","h",10)
g.addEdge("b","c",6)
g.addEdge("b","d",8)
g.addEdge("b","e",4)
g.addEdge("b","g",6)
g.addEdge("b","h",6)
g.addEdge("c","e",1)
g.addEdge("c","f",7)
g.addEdge("c","g",9)
g.addEdge("d","e",12)
g.addEdge("d","h",14)
g.addEdge("e","g",15)
g.addEdge("f","h",9)
g.addEdge("g","h",3)

assert dfs(g,'a') == ['b', 'c', 'e', 'd', 'h', 'f', 'g']

assert bfs(g,'a') == ['b', 'c', 'd', 'h', 'e', 'g', 'f']

assert dijkstra(g, 'g','f') == ['g', 'h', 'f']

assert dijkstra(g, 'c','h') == ['c', 'e', 'b', 'h']

assert dijkstra(g, 'f','d') == ['f', 'c', 'a', 'd']

print("Grafo 4 sucesso!")

g = Graph()

g.addVertex("0")
g.addVertex("1")
g.addVertex("2")
g.addVertex("3")
g.addVertex("4")
g.addVertex("5")
g.addVertex("6")
g.addVertex("7")
g.addVertex("8")
g.addVertex("9")
g.addVertex("10")
g.addVertex("11")
g.addVertex("12")
g.addVertex("13")
g.addVertex("14")
g.addVertex("15")
g.addVertex("16")
g.addVertex("17")
g.addVertex("18")

g.addEdge("1","2",20)
g.addEdge("1","8",29)
g.addEdge("1","12",29)
g.addEdge("1","13",37)

g.addEdge("2","3",25)
g.addEdge("2","8",28)
g.addEdge("2","12",39)

g.addEdge("3","4",25)
g.addEdge("3","8",30)
g.addEdge("3","13",54)

g.addEdge("4","5",39)
g.addEdge("4","6",32)
g.addEdge("4","7",42)
g.addEdge("4","9",23)
g.addEdge("4","10",33)
g.addEdge("4","14",56)

g.addEdge("5","6",12)
g.addEdge("5","7",26)
g.addEdge("5","10",19)

g.addEdge("6","7",17)
g.addEdge("6","10",35)
g.addEdge("6","11",30)

g.addEdge("7","11",38)

g.addEdge("8","12",25)
g.addEdge("8","13",22)

g.addEdge("9","10",26)
g.addEdge("9","13",34)
g.addEdge("9","14",26) #*
g.addEdge("9","16",43)

g.addEdge("10","11",24)
g.addEdge("10","14",30)
g.addEdge("10","15",19)

g.addEdge("11","15",26)
g.addEdge("11","18",36)

g.addEdge("12","13",27)
g.addEdge("12","16",43)

g.addEdge("13","14",24)
g.addEdge("13","16",19)

g.addEdge("14","15",20)
g.addEdge("14","16",19)
g.addEdge("14","17",17)

g.addEdge("15","17",18)
g.addEdge("15","18",21)

g.addEdge("16","17",26)
g.addEdge("17","18",15)

assert dfs(g,'5') ==['4', '3', '2', '1', '8', '12', '13', '9', '10', '6', '7', '11', '15', '14', '16', '17', '18']
assert bfs(g,'8') == ['1', '2', '3', '12', '13', '4', '16', '9', '14', '5', '6', '7', '10', '17', '15', '11', '18']
assert dijkstra(g, '1','5') == ['1', '2', '3', '4', '5']
assert dijkstra(g, '1','8') == ['1', '8']
assert dijkstra(g, '1','10') == ['1', '13', '14', '10']
assert dijkstra(g, '1','15') == ['1', '13', '14', '15']
assert dijkstra(g, '1','18') == ['1', '13', '14', '17', '18']

print("dfs------->",dfs(g,'5'))
print("bfs------->",bfs(g,'8'))
print("dfs------->",dfs(g,'10'))
print("bfs------->",bfs(g,'15'))
print("dijkstra--> 1-5 ", dijkstra(g, '1','5'))
print("dijkstra--> 1-8 ", dijkstra(g, '1','8'))
print("dijkstra--> 1-10", dijkstra(g, '1','10')) 
print("dijkstra--> 1-15", dijkstra(g, '1','15')) 
print("dijkstra--> 1-18", dijkstra(g, '1','18')) 
print("#######>>>> Aprovado!")