# -*- coding: utf-8 -*-
"""Atividade3.1_LeningtonRios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zum6XbSkWEWN_-h7BmZkfUthCVXiHUDJ

Algoritmos
"""

import math
from heapq import heappush, heappop

class Graph:
  def __init__(self):
    self.vertexMap = dict()           

  def addVertex(self, v):
    self.vertexMap[v] = dict()

  def removeVertex(self, v):  
    if v in self.vertexMap:
      for (i,j) in self.vertexMap[v].copy():
        print(f"e->{(i,j)}")
        self.removeEdge(i,j)
      del self.vertexMap[v]

  def vertices(self):    
    return list(self.vertexMap.keys())

  def adjacents(self, v):
    return [j for (i, j) in self.outgoing(v)]   

  def addEdge(self, u,v,data):
    if (u in self.vertexMap) and (v in self.vertexMap):
      self.vertexMap[u][(u,v)] = data
      self.vertexMap[v][(v,u)] = data
    else:
      raise ValueError(f"One or both of the V {u} and {v} are not present in the Graph!")  

  def removeEdge(self,u,v):
    if ((u,v) in self.vertexMap[u]) and ((v,u) in self.vertexMap[v]):
      del self.vertexMap[u][(u,v)]      
      del self.vertexMap[v][(v,u)]  

  def edges(self):
    ret = []
    for e in self.vertexMap.values():
      if len(e.keys()):
        ret.extend(list(e.keys()))
    return ret

  def getEdge(self,u,v):
    return self.vertexMap[u][(u,v)]

  def outgoing(self, v):
    return list(self.vertexMap[v].keys())  

  def outdegree(self, v):
    return len(self.vertexMap[v])

  def incoming(self, v):
    return [(j,i) for (i,j) in self.vertexMap[v]] 

  def indegree(self, v):
    return len(self.vertexMap[v])

  def path(self, v):
    ret = ""
    visited = set()
    visited.add(v)
    stack = []
    stack.append((v,None))
    while stack:
      (v, p) = stack.pop()
      if p:        
        ret+=f"{p}--{self.getEdge(p,v)}--{v}  "
              
      for u in self.adjacents(v):        
        if u not in visited:          
          visited.add(u)          
          stack.append((u,v))

    return ret.strip() 

import sys
  
#To do
def prims(G):
  SPT = Graph()
  minAresta = ()
  custo = sys.maxsize
  
  for e in G.edges():
    if G.getEdge(e[0], e[1]) < custo:
      minAresta = e
      custo = G.getEdge(e[0], e[1])
  
  SPT.addVertex(minAresta[0])
  SPT.addVertex(minAresta[1])
  SPT.addEdge(minAresta[0], minAresta[1], custo)
  
  while len(SPT.edges())//2 < len(G.vertices()) - 1:
    minCusto = sys.maxsize

    for v in SPT.vertices():
      for a in G.adjacents(v):
        if G.getEdge(v,a) < minCusto and a not in SPT.vertices():
          minVertice = v
          minAdjascente = a
          minCusto = G.getEdge(v,a)
    SPT.addVertex(minAdjascente)
    SPT.addEdge(minVertice,minAdjascente,minCusto)

  return SPT

#To do
def kruskals(G):
  SPT = Graph()
  H = []
  arestasCiclo = set()

  for e in G.edges():
    heappush(H, (G.getEdge(e[0], e[1]), e[0], e[1]))
  
  while len(SPT.edges())//2 < len(G.vertices()) - 1:
    custo, o, d = heappop(H)

    if ((o,d) not in SPT.edges()):
      if (o in SPT.vertices()):
        path = SPT.path(o).split('  ')
        for p in path:
          if (p[0] == d or p[len(p)-1] == d):
            arestasCiclo.add((o,d))
            arestasCiclo.add((d,o))
      
      if ((o,d) not in arestasCiclo):
        if o not in SPT.vertices():
          SPT.addVertex(o)
        if d not in SPT.vertices():
          SPT.addVertex(d)
        SPT.addEdge(o, d, custo)

  return SPT

# First
g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addEdge("a","b",10)
g.addEdge("a","c",12)
g.addEdge("b","c",5)
g.addEdge("b","d",20)
g.addEdge("b","e",19)
g.addEdge("c","d",2)
g.addEdge("d","e",31)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e']
assert sorted(p.edges()) == sorted([('d', 'c'), ('c', 'd'), ('c', 'b'), ('b', 'c'), ('b', 'a'), ('b', 'e'), ('a', 'b'), ('e', 'b')])
assert p.path("a") == "a--10--b  b--19--e  b--5--c  c--2--d"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e']
assert sorted(p.edges()) == sorted([('d', 'c'), ('c', 'd'), ('c', 'b'), ('b', 'c'), ('b', 'a'), ('b', 'e'), ('a', 'b'), ('e', 'b')])
assert p.path("a") == "a--10--b  b--19--e  b--5--c  c--2--d"

# Second
g = Graph()
vertices = "abcdefghijklmnopqrstuvxz"
for vertice in vertices:
  g.addVertex(vertice)

g.addEdge("a","b",6)
g.addEdge("a","d",4)
g.addEdge("a","e",1)
g.addEdge("b","c",13)
g.addEdge("b","e",18)
g.addEdge("c","k",17)
g.addEdge("d","g",9)
g.addEdge("d","h",6)
g.addEdge("e","h",12)
g.addEdge("e","f",18)
g.addEdge("f","j",31)
g.addEdge("f","k",14)
g.addEdge("g","l",5)
g.addEdge("h","i",3)
g.addEdge("i","j",2)
g.addEdge("j","k",21)
g.addEdge("j","o",42)
g.addEdge("j","q",46)
g.addEdge("k","q",33)
g.addEdge("k","s",26)
g.addEdge("l","t",56)
g.addEdge("m","t",63)
g.addEdge("m","n",29)
g.addEdge("m","x",7)
g.addEdge("n","o",51)
g.addEdge("n","z",36)
g.addEdge("p","q",94)
g.addEdge("p","z",27)
g.addEdge("q","r",67)
g.addEdge("r","s",61)
g.addEdge("s","z",88)
g.addEdge("t","u",36)
g.addEdge("u","v",74)
g.addEdge("v","x",23)
g.addEdge("x","z",8)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'z']
assert sorted(p.edges()) == [('a', 'b'), ('a', 'd'), ('a', 'e'), ('b', 'a'), ('b', 'c'), ('c', 'b'), ('c', 'k'), ('d', 'a'), ('d', 'g'), ('d', 'h'), ('e', 'a'), ('f', 'k'), ('g', 'd'), ('g', 'l'), ('h', 'd'), ('h', 'i'), ('i', 'h'), ('i', 'j'), ('j', 'i'), ('j', 'o'), ('k', 'c'), ('k', 'f'), ('k', 'q'), ('k', 's'), ('l', 'g'), ('l', 't'), ('m', 'n'), ('m', 'x'), ('n', 'm'), ('n', 'o'), ('o', 'j'), ('o', 'n'), ('p', 'z'), ('q', 'k'), ('r', 's'), ('s', 'k'), ('s', 'r'), ('t', 'l'), ('t', 'u'), ('u', 't'), ('v', 'x'), ('x', 'm'), ('x', 'v'), ('x', 'z'), ('z', 'p'), ('z', 'x')]
assert p.path("a") == "a--6--b  b--13--c  c--17--k  k--33--q  k--26--s  s--61--r  k--14--f  a--4--d  d--9--g  g--5--l  l--56--t  t--36--u  d--6--h  h--3--i  i--2--j  j--42--o  o--51--n  n--29--m  m--7--x  x--23--v  x--8--z  z--27--p  a--1--e"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'z']
assert sorted(p.edges()) == [('a', 'b'), ('a', 'd'), ('a', 'e'), ('b', 'a'), ('b', 'c'), ('c', 'b'), ('c', 'k'), ('d', 'a'), ('d', 'g'), ('d', 'h'), ('e', 'a'), ('f', 'k'), ('g', 'd'), ('g', 'l'), ('h', 'd'), ('h', 'i'), ('i', 'h'), ('i', 'j'), ('j', 'i'), ('j', 'o'), ('k', 'c'), ('k', 'f'), ('k', 'q'), ('k', 's'), ('l', 'g'), ('l', 't'), ('m', 'n'), ('m', 'x'), ('n', 'm'), ('n', 'o'), ('o', 'j'), ('o', 'n'), ('p', 'z'), ('q', 'k'), ('r', 's'), ('s', 'k'), ('s', 'r'), ('t', 'l'), ('t', 'u'), ('u', 't'), ('v', 'x'), ('x', 'm'), ('x', 'v'), ('x', 'z'), ('z', 'p'), ('z', 'x')]
assert p.path("a") == "a--6--b  b--13--c  c--17--k  k--33--q  k--26--s  s--61--r  k--14--f  a--4--d  d--9--g  g--5--l  l--56--t  t--36--u  d--6--h  h--3--i  i--2--j  j--42--o  o--51--n  n--29--m  m--7--x  x--23--v  x--8--z  z--27--p  a--1--e"

# Graph 1
g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addEdge("a","b",28)
g.addEdge("a","c",10)
g.addEdge("c","f",25)
g.addEdge("b","d",14)
g.addEdge("b","e",16)
g.addEdge("d","f",24)
g.addEdge("d","g",18)
g.addEdge("f","g",22)
g.addEdge("g","e",12)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']
assert sorted(p.edges()) == sorted([('a', 'c'), ('b', 'e'), ('b', 'd'), ('c', 'a'), ('c', 'f'), ('d', 'b'), ('e', 'g'), ('e', 'b'), ('f', 'c'), ('f', 'g'), ('g', 'f'), ('g', 'e')])
assert p.path("a") == "a--10--c  c--25--f  f--22--g  g--12--e  e--16--b  b--14--d"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']
assert sorted(p.edges()) == sorted([('a', 'c'), ('b', 'e'), ('b', 'd'), ('c', 'a'), ('c', 'f'), ('d', 'b'), ('e', 'g'), ('e', 'b'), ('f', 'c'), ('f', 'g'), ('g', 'f'), ('g', 'e')])
assert p.path("a") == "a--10--c  c--25--f  f--22--g  g--12--e  e--16--b  b--14--d"

# Graph 2
g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addEdge("a","b",6)
g.addEdge("a","c",4)
g.addEdge("b","c",5)
g.addEdge("b","e",14)
g.addEdge("b","h",10)
g.addEdge("c","f",2)
g.addEdge("c","d",9)
g.addEdge("e","h",3)
g.addEdge("f","g",15)
g.addEdge("f","h",8)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
assert sorted(p.edges()) == sorted([('a', 'c'), ('b', 'c'), ('c', 'f'), ('c', 'a'), ('c', 'b'), ('c', 'd'), ('d', 'c'), ('e', 'h'), ('f', 'c'), ('f', 'h'), ('f', 'g'), ('g', 'f'), ('h', 'f'), ('h', 'e')])
assert p.path("a") == "a--4--c  c--9--d  c--5--b  c--2--f  f--15--g  f--8--h  h--3--e"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
assert sorted(p.edges()) == sorted([('a', 'c'), ('b', 'c'), ('c', 'f'), ('c', 'a'), ('c', 'b'), ('c', 'd'), ('d', 'c'), ('e', 'h'), ('f', 'c'), ('f', 'h'), ('f', 'g'), ('g', 'f'), ('h', 'f'), ('h', 'e')])
assert p.path("a") == "a--4--c  c--9--d  c--5--b  c--2--f  f--15--g  f--8--h  h--3--e"

print("Here comes the sun...")

#########GRAFO1
g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")

g.addEdge("a","b",10)
g.addEdge("a","d",20)
g.addEdge("a","e",20)
g.addEdge("a","f",5)
g.addEdge("a","g",15)
g.addEdge("a","h",5)
g.addEdge("b","c",15)
g.addEdge("b","d",10)
g.addEdge("b","h",20)
g.addEdge("b","i",15)
g.addEdge("b","j",5)
g.addEdge("c","d",5)
g.addEdge("c","j",15)
g.addEdge("d","e",12)
g.addEdge("e","f",5)
g.addEdge("f","g",10)
g.addEdge("g","h",5)
g.addEdge("h","i",20)
g.addEdge("i","j",10)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i','j']
assert sorted(p.edges()) == sorted([('a', 'f'), ('a', 'h'), ('a', 'b'), ('b', 'a'), ('b', 'j'), ('b', 'd'), ('c', 'd'), ('d', 'b'), ('d', 'c'), ('e', 'f'), ('f', 'a'), ('f', 'e'), ('g', 'h'), ('h', 'a'), ('h', 'g'), ('i', 'j'), ('j', 'b'), ('j', 'i')])
assert p.path("a") == "a--10--b  b--10--d  d--5--c  b--5--j  j--10--i  a--5--h  h--5--g  a--5--f  f--5--e"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i','j']
assert sorted(p.edges()) == sorted([('a', 'f'), ('a', 'h'), ('a', 'b'), ('b', 'a'), ('b', 'j'), ('b', 'd'), ('c', 'd'), ('d', 'b'), ('d', 'c'), ('e', 'f'), ('f', 'a'), ('f', 'e'), ('g', 'h'), ('h', 'a'), ('h', 'g'), ('i', 'j'), ('j', 'b'), ('j', 'i')])
assert p.path("a") == "a--10--b  b--10--d  d--5--c  b--5--j  j--10--i  a--5--h  h--5--g  a--5--f  f--5--e"

#########GRAFO2
g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")

g.addEdge("a","b",3)
g.addEdge("a","c",5)
g.addEdge("a","d",2)
g.addEdge("a","h",10)
g.addEdge("b","c",6)
g.addEdge("b","d",8)
g.addEdge("b","e",4)
g.addEdge("b","g",6)
g.addEdge("b","h",6)
g.addEdge("c","e",1)
g.addEdge("c","f",7)
g.addEdge("c","g",9)
g.addEdge("d","e",12)
g.addEdge("d","h",14)
g.addEdge("e","g",15)
g.addEdge("f","h",9)
g.addEdge("g","h",3)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
assert sorted(p.edges()) == sorted([('a', 'b'), ('a', 'd'), ('b', 'e'), ('b', 'a'), ('b', 'g'), ('c', 'e'), ('c', 'f'), ('d', 'a'), ('e', 'c'), ('e', 'b'), ('f', 'c'), ('g', 'b'), ('g', 'h'), ('h', 'g')])
assert p.path("a") == "a--2--d  a--3--b  b--6--g  g--3--h  b--4--e  e--1--c  c--7--f"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
assert sorted(p.edges()) == sorted([('a', 'd'), ('a', 'b'), ('b', 'a'), ('b', 'e'), ('b', 'g'), ('c', 'e'), ('c', 'f'), ('d', 'a'), ('e', 'c'), ('e', 'b'), ('f', 'c'), ('g', 'h'), ('g', 'b'), ('h', 'g')])
assert p.path("a") == "a--3--b  b--6--g  g--3--h  b--4--e  e--1--c  c--7--f  a--2--d"

#########GRAFO3
g = Graph()
g.addVertex("a")
g.addVertex("b")
g.addVertex("c")
g.addVertex("d")
g.addVertex("e")
g.addVertex("f")
g.addVertex("g")
g.addVertex("h")
g.addVertex("i")
g.addVertex("j")
g.addVertex("k")
g.addVertex("l")
g.addVertex("m")
g.addVertex("n")
g.addVertex("o")
g.addVertex("p")
g.addVertex("q")
g.addVertex("r")
g.addVertex("s")
g.addVertex("t")

g.addEdge("a","b",2)
g.addEdge("a","c",4)
g.addEdge("a","g",3)
g.addEdge("b","d",7)
g.addEdge("b","e",9)
g.addEdge("b","m",11)
g.addEdge("c","d",2)
g.addEdge("c","g",8)
g.addEdge("c","n",14)
g.addEdge("d","e",1)
g.addEdge("d","f",5)
g.addEdge("d","j",6)
g.addEdge("d","l",4)
g.addEdge("e","l",3)
g.addEdge("e","m",8)
g.addEdge("f","g",10)
g.addEdge("f","i",6)
g.addEdge("f","o",20)
g.addEdge("g","j",7)
g.addEdge("g","m",4)
g.addEdge("g","n",11)
g.addEdge("h","i",5)
g.addEdge("h","j",3)
g.addEdge("h","k",7)
g.addEdge("i","k",15)
g.addEdge("i","t",11)
g.addEdge("j","k",12)
g.addEdge("j","o",5)
g.addEdge("k","o",21)
g.addEdge("l","n",8)
g.addEdge("l","p",5)
g.addEdge("l","s",7)
g.addEdge("m","p",7)
g.addEdge("n","o",7)
g.addEdge("n","s",6)
g.addEdge("o","s",3)
g.addEdge("p","q",1)
g.addEdge("q","s",5)
g.addEdge("r","s",1)
g.addEdge("r","t",11)
g.addEdge("s","t",5)

p = prims(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i','j','k','l','m','n','o','p','q','r','s','t']
assert sorted(p.edges()) == sorted([('a', 'c'), ('a', 'b'), ('a', 'g'), ('b', 'a'), ('c', 'd'), ('c', 'a'), ('d', 'e'), ('d', 'c'), ('d', 'f'), ('e', 'd'), ('e', 'l'), ('f', 'd'), ('g', 'a'), ('g', 'm'), ('h', 'j'), ('h', 'i'), ('h', 'k'), ('i', 'h'), ('j', 'o'), ('j', 'h'), ('k', 'h'), ('l', 'e'), ('l', 'p'), ('m', 'g'), ('n', 's'), ('o', 's'), ('o', 'j'), ('p', 'l'), ('p', 'q'), ('q', 'p'), ('q', 's'), ('r', 's'), ('s', 'q'), ('s', 'r'), ('s', 'o'), ('s', 't'), ('s', 'n'), ('t', 's')])
assert p.path("a") == "a--3--g  g--4--m  a--2--b  a--4--c  c--2--d  d--5--f  d--1--e  e--3--l  l--5--p  p--1--q  q--5--s  s--6--n  s--5--t  s--3--o  o--5--j  j--3--h  h--7--k  h--5--i  s--1--r"

p = kruskals(g)
assert sorted(p.vertices()) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i','j','k','l','m','n','o','p','q','r','s','t']
assert sorted(p.edges()) == sorted([('a', 'b'), ('a', 'g'), ('a', 'c'), ('b', 'a'), ('c', 'd'), ('c', 'a'), ('d', 'e'), ('d', 'c'), ('d', 'f'), ('e', 'd'), ('e', 'l'), ('f', 'd'), ('g', 'a'), ('g', 'm'), ('h', 'j'), ('h', 'i'), ('h', 'k'), ('i', 'h'), ('j', 'h'), ('j', 'o'), ('k', 'h'), ('l', 'e'), ('l', 'p'), ('m', 'g'), ('n', 's'), ('o', 's'), ('o', 'j'), ('p', 'q'), ('p', 'l'), ('q', 'p'), ('q', 's'), ('r', 's'), ('s', 'r'), ('s', 'o'), ('s', 'q'), ('s', 't'), ('s', 'n'), ('t', 's')])
assert p.path("a") == "a--4--c  c--2--d  d--5--f  d--1--e  e--3--l  l--5--p  p--1--q  q--5--s  s--6--n  s--5--t  s--3--o  o--5--j  j--3--h  h--7--k  h--5--i  s--1--r  a--3--g  g--4--m  a--2--b"